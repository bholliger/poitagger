from __future__ import print_function
from . import *

def test(function,params,vector,expected):
    result = around(globals()[function](*params).T.dot(vector))
    print(function,params,":", result.ravel(),"^T", "TRUE" if all(result.ravel()==expected.ravel()) else "FALSE, expected: %s" %expected)

def test2(function,params):
    print(function,params, end=' ') 
    return globals()[function](*params)
    
if __name__=="__main__":
    
    vec = array([[0], [1], [2]])
    print("\nTESTS:\n")
    print("Vector:",vec)
        
    X =  array([0,2,-1])
    Y =  array([-2,1,0])
    Z =  array([1,0,2])
    XX = array([0,-1,-2])
    YY = array([0,1,-2])
    ZZ = array([0,-1,2])
    XY = array([1,2,0])
    XZ = array([2,0,-1])
    YX = array([-2,0,-1])
    YZ = array([1,2,0])
    ZX = array([1,2,0])
    ZY = array([-2,0,1])
    aAngles = (90,0,0)
    bAngles = (0,90,0)
    gAngles = (0,0,90)
    abAngles = (90,90,0)
    bgAngles = (0,90,90)
    agAngles = (90,0,90)
    
    print("\nSINGLE ANGLE ALPHA")
    test("XYXdeg",aAngles,vec,X)
    test("XZXdeg",aAngles,vec,X)
    test("YXYdeg",aAngles,vec,Y)
    test("YZYdeg",aAngles,vec,Y)
    test("ZXZdeg",aAngles,vec,Z)
    test("ZYZdeg",aAngles,vec,Z)
    test("XYZdeg",aAngles,vec,X)
    test("XZYdeg",aAngles,vec,X)
    test("YXZdeg",aAngles,vec,Y)
    test("YZXdeg",aAngles,vec,Y)
    test("ZXYdeg",aAngles,vec,Z)
    test("ZYXdeg",aAngles,vec,Z)
    
    print("\nSINGLE ANGLE BETA")
    test("XYXdeg",bAngles,vec,Y)
    test("XZXdeg",bAngles,vec,Z)
    test("YXYdeg",bAngles,vec,X)
    test("YZYdeg",bAngles,vec,Z)
    test("ZXZdeg",bAngles,vec,X)
    test("ZYZdeg",bAngles,vec,Y)
    test("XYZdeg",bAngles,vec,Y)
    test("XZYdeg",bAngles,vec,Z)
    test("YXZdeg",bAngles,vec,X)
    test("YZXdeg",bAngles,vec,Z)
    test("ZXYdeg",bAngles,vec,X)
    test("ZYXdeg",bAngles,vec,Y)
    
    print("\nSINGLE ANGLE GAMMA")
    test("XYXdeg",gAngles,vec,X)
    test("XZXdeg",gAngles,vec,X)
    test("YXYdeg",gAngles,vec,Y)
    test("YZYdeg",gAngles,vec,Y)
    test("ZXZdeg",gAngles,vec,Z)
    test("ZYZdeg",gAngles,vec,Z)
    test("XYZdeg",gAngles,vec,Z)
    test("XZYdeg",gAngles,vec,Y)
    test("YXZdeg",gAngles,vec,Z)
    test("YZXdeg",gAngles,vec,X)
    test("ZXYdeg",gAngles,vec,Y)
    test("ZYXdeg",gAngles,vec,X)
    
    print("\nALPHA AND BETA")
    test("XYXdeg",abAngles,vec,XY)
    test("XZXdeg",abAngles,vec,XZ)
    test("YXYdeg",abAngles,vec,YX)
    test("YZYdeg",abAngles,vec,YZ)
    test("ZXZdeg",abAngles,vec,ZX)
    test("ZYZdeg",abAngles,vec,ZY)
    test("XYZdeg",abAngles,vec,XY)
    test("XZYdeg",abAngles,vec,XZ)
    test("YXZdeg",abAngles,vec,YX)
    test("YZXdeg",abAngles,vec,YZ)
    test("ZXYdeg",abAngles,vec,ZX)
    test("ZYXdeg",abAngles,vec,ZY)
   
    print("\nBETA AND GAMMA")
    test("XYXdeg",bgAngles,vec,YX)
    test("XZXdeg",bgAngles,vec,ZX)
    test("YXYdeg",bgAngles,vec,XY)
    test("YZYdeg",bgAngles,vec,ZY)
    test("ZXZdeg",bgAngles,vec,XZ)
    test("ZYZdeg",bgAngles,vec,YZ)
    test("XYZdeg",bgAngles,vec,YZ)
    test("XZYdeg",bgAngles,vec,ZY)
    test("YXZdeg",bgAngles,vec,XZ)
    test("YZXdeg",bgAngles,vec,ZX)
    test("ZXYdeg",bgAngles,vec,XY)
    test("ZYXdeg",bgAngles,vec,YX)
   
    print("\nALPHA AND GAMMA")
    test("XYXdeg",agAngles,vec,XX)
    test("XZXdeg",agAngles,vec,XX)
    test("YXYdeg",agAngles,vec,YY)
    test("YZYdeg",agAngles,vec,YY)
    test("ZXZdeg",agAngles,vec,ZZ)
    test("ZYZdeg",agAngles,vec,ZZ)
    test("XYZdeg",agAngles,vec,XZ)
    test("XZYdeg",agAngles,vec,XY)
    test("YXZdeg",agAngles,vec,YZ)
    test("YZXdeg",agAngles,vec,YX)
    test("ZXYdeg",agAngles,vec,ZY)
    test("ZYXdeg",agAngles,vec,ZX)
   
    print("FURTHER TESTS\n")
    print("Vector:",vec)
    print("AThenB A=ZYX(0,0,90), B=ZYX(0,90,0):",AThenB(ZYXdeg(0,0,90),ZYXdeg(0,90,0)).dot(vec))
    R1 = ZYXdeg(*gAngles)
    test("ZYXdeg",gAngles,vec,X)
    R2 = ZYXdeg(*bAngles)
    test("ZYXdeg",bAngles,vec,Y)
    R3 = R2.T.dot(R1.T)
    erg = around(R3.dot(vec)).ravel()
    expected = array([1,2,0])
    print("ZYX",bAngles,"dot ZYX",gAngles, ":", erg, "TRUE" if all(erg == expected) else "FALSE, expected: %s"% expected)
    